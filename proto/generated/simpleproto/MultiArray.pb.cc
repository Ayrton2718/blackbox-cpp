// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simpleproto/MultiArray.proto

#include "simpleproto/MultiArray.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace simpleproto {
PROTOBUF_CONSTEXPR MultiArrayDouble::MultiArrayDouble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiArrayDoubleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiArrayDoubleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiArrayDoubleDefaultTypeInternal() {}
  union {
    MultiArrayDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiArrayDoubleDefaultTypeInternal _MultiArrayDouble_default_instance_;
PROTOBUF_CONSTEXPR MultiArrayFloat::MultiArrayFloat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiArrayFloatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiArrayFloatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiArrayFloatDefaultTypeInternal() {}
  union {
    MultiArrayFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiArrayFloatDefaultTypeInternal _MultiArrayFloat_default_instance_;
PROTOBUF_CONSTEXPR MultiArrayInt64::MultiArrayInt64(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiArrayInt64DefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiArrayInt64DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiArrayInt64DefaultTypeInternal() {}
  union {
    MultiArrayInt64 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiArrayInt64DefaultTypeInternal _MultiArrayInt64_default_instance_;
PROTOBUF_CONSTEXPR MultiArrayBool::MultiArrayBool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiArrayBoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiArrayBoolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiArrayBoolDefaultTypeInternal() {}
  union {
    MultiArrayBool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiArrayBoolDefaultTypeInternal _MultiArrayBool_default_instance_;
}  // namespace simpleproto
static ::_pb::Metadata file_level_metadata_simpleproto_2fMultiArray_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_simpleproto_2fMultiArray_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_simpleproto_2fMultiArray_2eproto = nullptr;

const uint32_t TableStruct_simpleproto_2fMultiArray_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayDouble, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayDouble, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayFloat, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayFloat, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayInt64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayInt64, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayInt64, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayBool, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::simpleproto::MultiArrayBool, _impl_.values_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::simpleproto::MultiArrayDouble)},
  { 8, -1, -1, sizeof(::simpleproto::MultiArrayFloat)},
  { 16, -1, -1, sizeof(::simpleproto::MultiArrayInt64)},
  { 24, -1, -1, sizeof(::simpleproto::MultiArrayBool)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::simpleproto::_MultiArrayDouble_default_instance_._instance,
  &::simpleproto::_MultiArrayFloat_default_instance_._instance,
  &::simpleproto::_MultiArrayInt64_default_instance_._instance,
  &::simpleproto::_MultiArrayBool_default_instance_._instance,
};

const char descriptor_table_protodef_simpleproto_2fMultiArray_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034simpleproto/MultiArray.proto\022\013simplepr"
  "oto\032\037google/protobuf/timestamp.proto\"Q\n\020"
  "MultiArrayDouble\022-\n\ttimestamp\030\001 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022\016\n\006values\030\002 \003(\001\""
  "P\n\017MultiArrayFloat\022-\n\ttimestamp\030\001 \001(\0132\032."
  "google.protobuf.Timestamp\022\016\n\006values\030\003 \003("
  "\002\"P\n\017MultiArrayInt64\022-\n\ttimestamp\030\001 \001(\0132"
  "\032.google.protobuf.Timestamp\022\016\n\006values\030\004 "
  "\003(\003\"O\n\016MultiArrayBool\022-\n\ttimestamp\030\001 \001(\013"
  "2\032.google.protobuf.Timestamp\022\016\n\006values\030\004"
  " \003(\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_simpleproto_2fMultiArray_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_simpleproto_2fMultiArray_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_simpleproto_2fMultiArray_2eproto = {
    false, false, 412, descriptor_table_protodef_simpleproto_2fMultiArray_2eproto,
    "simpleproto/MultiArray.proto",
    &descriptor_table_simpleproto_2fMultiArray_2eproto_once, descriptor_table_simpleproto_2fMultiArray_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_simpleproto_2fMultiArray_2eproto::offsets,
    file_level_metadata_simpleproto_2fMultiArray_2eproto, file_level_enum_descriptors_simpleproto_2fMultiArray_2eproto,
    file_level_service_descriptors_simpleproto_2fMultiArray_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_simpleproto_2fMultiArray_2eproto_getter() {
  return &descriptor_table_simpleproto_2fMultiArray_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_simpleproto_2fMultiArray_2eproto(&descriptor_table_simpleproto_2fMultiArray_2eproto);
namespace simpleproto {

// ===================================================================

class MultiArrayDouble::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const MultiArrayDouble* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MultiArrayDouble::_Internal::timestamp(const MultiArrayDouble* msg) {
  return *msg->_impl_.timestamp_;
}
void MultiArrayDouble::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
MultiArrayDouble::MultiArrayDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:simpleproto.MultiArrayDouble)
}
MultiArrayDouble::MultiArrayDouble(const MultiArrayDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiArrayDouble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:simpleproto.MultiArrayDouble)
}

inline void MultiArrayDouble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiArrayDouble::~MultiArrayDouble() {
  // @@protoc_insertion_point(destructor:simpleproto.MultiArrayDouble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiArrayDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void MultiArrayDouble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiArrayDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleproto.MultiArrayDouble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiArrayDouble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiArrayDouble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simpleproto.MultiArrayDouble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated double values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simpleproto.MultiArrayDouble)
  return target;
}

size_t MultiArrayDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleproto.MultiArrayDouble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiArrayDouble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiArrayDouble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiArrayDouble::GetClassData() const { return &_class_data_; }


void MultiArrayDouble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiArrayDouble*>(&to_msg);
  auto& from = static_cast<const MultiArrayDouble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:simpleproto.MultiArrayDouble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiArrayDouble::CopyFrom(const MultiArrayDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleproto.MultiArrayDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiArrayDouble::IsInitialized() const {
  return true;
}

void MultiArrayDouble::InternalSwap(MultiArrayDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiArrayDouble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_simpleproto_2fMultiArray_2eproto_getter, &descriptor_table_simpleproto_2fMultiArray_2eproto_once,
      file_level_metadata_simpleproto_2fMultiArray_2eproto[0]);
}

// ===================================================================

class MultiArrayFloat::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const MultiArrayFloat* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MultiArrayFloat::_Internal::timestamp(const MultiArrayFloat* msg) {
  return *msg->_impl_.timestamp_;
}
void MultiArrayFloat::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
MultiArrayFloat::MultiArrayFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:simpleproto.MultiArrayFloat)
}
MultiArrayFloat::MultiArrayFloat(const MultiArrayFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiArrayFloat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:simpleproto.MultiArrayFloat)
}

inline void MultiArrayFloat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiArrayFloat::~MultiArrayFloat() {
  // @@protoc_insertion_point(destructor:simpleproto.MultiArrayFloat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiArrayFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void MultiArrayFloat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiArrayFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleproto.MultiArrayFloat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiArrayFloat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiArrayFloat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simpleproto.MultiArrayFloat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated float values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simpleproto.MultiArrayFloat)
  return target;
}

size_t MultiArrayFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleproto.MultiArrayFloat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiArrayFloat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiArrayFloat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiArrayFloat::GetClassData() const { return &_class_data_; }


void MultiArrayFloat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiArrayFloat*>(&to_msg);
  auto& from = static_cast<const MultiArrayFloat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:simpleproto.MultiArrayFloat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiArrayFloat::CopyFrom(const MultiArrayFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleproto.MultiArrayFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiArrayFloat::IsInitialized() const {
  return true;
}

void MultiArrayFloat::InternalSwap(MultiArrayFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiArrayFloat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_simpleproto_2fMultiArray_2eproto_getter, &descriptor_table_simpleproto_2fMultiArray_2eproto_once,
      file_level_metadata_simpleproto_2fMultiArray_2eproto[1]);
}

// ===================================================================

class MultiArrayInt64::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const MultiArrayInt64* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MultiArrayInt64::_Internal::timestamp(const MultiArrayInt64* msg) {
  return *msg->_impl_.timestamp_;
}
void MultiArrayInt64::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
MultiArrayInt64::MultiArrayInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:simpleproto.MultiArrayInt64)
}
MultiArrayInt64::MultiArrayInt64(const MultiArrayInt64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiArrayInt64* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:simpleproto.MultiArrayInt64)
}

inline void MultiArrayInt64::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiArrayInt64::~MultiArrayInt64() {
  // @@protoc_insertion_point(destructor:simpleproto.MultiArrayInt64)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiArrayInt64::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void MultiArrayInt64::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiArrayInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleproto.MultiArrayInt64)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiArrayInt64::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiArrayInt64::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simpleproto.MultiArrayInt64)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated int64 values = 4;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simpleproto.MultiArrayInt64)
  return target;
}

size_t MultiArrayInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleproto.MultiArrayInt64)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 values = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiArrayInt64::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiArrayInt64::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiArrayInt64::GetClassData() const { return &_class_data_; }


void MultiArrayInt64::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiArrayInt64*>(&to_msg);
  auto& from = static_cast<const MultiArrayInt64&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:simpleproto.MultiArrayInt64)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiArrayInt64::CopyFrom(const MultiArrayInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleproto.MultiArrayInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiArrayInt64::IsInitialized() const {
  return true;
}

void MultiArrayInt64::InternalSwap(MultiArrayInt64* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiArrayInt64::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_simpleproto_2fMultiArray_2eproto_getter, &descriptor_table_simpleproto_2fMultiArray_2eproto_once,
      file_level_metadata_simpleproto_2fMultiArray_2eproto[2]);
}

// ===================================================================

class MultiArrayBool::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const MultiArrayBool* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MultiArrayBool::_Internal::timestamp(const MultiArrayBool* msg) {
  return *msg->_impl_.timestamp_;
}
void MultiArrayBool::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
MultiArrayBool::MultiArrayBool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:simpleproto.MultiArrayBool)
}
MultiArrayBool::MultiArrayBool(const MultiArrayBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiArrayBool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:simpleproto.MultiArrayBool)
}

inline void MultiArrayBool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiArrayBool::~MultiArrayBool() {
  // @@protoc_insertion_point(destructor:simpleproto.MultiArrayBool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiArrayBool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void MultiArrayBool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiArrayBool::Clear() {
// @@protoc_insertion_point(message_clear_start:simpleproto.MultiArrayBool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiArrayBool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiArrayBool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simpleproto.MultiArrayBool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated bool values = 4;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simpleproto.MultiArrayBool)
  return target;
}

size_t MultiArrayBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simpleproto.MultiArrayBool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiArrayBool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiArrayBool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiArrayBool::GetClassData() const { return &_class_data_; }


void MultiArrayBool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiArrayBool*>(&to_msg);
  auto& from = static_cast<const MultiArrayBool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:simpleproto.MultiArrayBool)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiArrayBool::CopyFrom(const MultiArrayBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simpleproto.MultiArrayBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiArrayBool::IsInitialized() const {
  return true;
}

void MultiArrayBool::InternalSwap(MultiArrayBool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiArrayBool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_simpleproto_2fMultiArray_2eproto_getter, &descriptor_table_simpleproto_2fMultiArray_2eproto_once,
      file_level_metadata_simpleproto_2fMultiArray_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace simpleproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::simpleproto::MultiArrayDouble*
Arena::CreateMaybeMessage< ::simpleproto::MultiArrayDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simpleproto::MultiArrayDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleproto::MultiArrayFloat*
Arena::CreateMaybeMessage< ::simpleproto::MultiArrayFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simpleproto::MultiArrayFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleproto::MultiArrayInt64*
Arena::CreateMaybeMessage< ::simpleproto::MultiArrayInt64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simpleproto::MultiArrayInt64 >(arena);
}
template<> PROTOBUF_NOINLINE ::simpleproto::MultiArrayBool*
Arena::CreateMaybeMessage< ::simpleproto::MultiArrayBool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simpleproto::MultiArrayBool >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
